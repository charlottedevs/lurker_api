#!/bin/bash

set -e

# ensure we're at project root
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"
cd "$DIR/.."

BUILD_ENV="$1"

check_build_env () {
  # ask user to confirm BUILD_ENV if no argument given
  if [ -z "$BUILD_ENV" ]; then
    default_selection='1'

    echo 'Select build environment:'
    echo '1) development'
    echo '2) production'
    read -p "build selection: [$default_selection] " build_selection

    build_selection=${build_selection:-$default_selection}

    if [ "$build_selection" = '1' ]; then
      BUILD_ENV='development'
    elif [ "$build_selection" = '2' ]; then
      BUILD_ENV='production'
    else
      echo "invalid build selection: '$build_selection'"
      exit
    fi
  fi

  echo "building environment: $BUILD_ENV"
}

showcmd() {
  echo "$ $*"
}

info() {
  echo "+ $*"
}

ok() {
  info "=> OK"
}

step() {
  showcmd "$*"
  eval "$*" || abort "$*"
  ok
}

abort() {
  info "!!! FAILED: '$*'" >&2
  exit 1
}

check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Please sudo or log in as root first." 1>&2
    exit 1
  fi

  ok
}

check_and_install_docker () {
  docker_path=`command -v docker.io || command -v docker || true`
  if [ -z $docker_path ]; then
    read  -p "Docker not installed. Enter to install from https://get.docker.com/ or Ctrl+C to exit"
    curl https://get.docker.com/ | sh
  fi

  docker_path=`command -v docker.io || command -v docker || true`
  if [ -z $docker_path ]; then
    echo Docker install failed. Quitting.
    exit
  fi

  ok
}

add_sudo_users_to_docker_group () {
  groupadd docker 2>/dev/null || true
  users=`grep -Po '^sudo.+:\K.*$' /etc/group || true`
  for u in "$users"; do
    echo "$u is now in docker group"
    usermod -aG docker $u
  done

  ok
}

check_and_install_docker_compose () {
  docker_compose_path=`command -v docker-compose || true`
  if [ -z $docker_compose_path ]; then
    read  -p "Docker Compose not installed. Enter to install or Ctrl+C to exit"
    compose_version=`git ls-remote https://github.com/docker/compose | grep refs/tags | grep -oP "[0-9]+\.[0-9][0-9]+\.[0-9]+$" | tail -n 1`
    compose_url="https://github.com/docker/compose/releases/download/${compose_version}/docker-compose-`uname -s`-`uname -m`"
    compose_completion_url="https://raw.githubusercontent.com/docker/compose/${compose_version}/contrib/completion/bash/docker-compose"

    sh -c "curl -L $compose_url > /usr/local/bin/docker-compose"
    chmod +x /usr/local/bin/docker-compose
    sh -c "curl -L $compose_completion_url > /etc/bash_completion.d/docker-compose"
  fi


  docker_compose_path=`command -v docker-compose || true`
  if [ -z $docker_compose_path ]; then
    echo Docker Compose install failed. Quitting.
    exit
  fi

  ok
}

compose () {
  if [ "$BUILD_ENV" = "production" ]; then
    flags='-f production.yml'
  elif [ "$BUILD_ENV" != "development" ]; then
    abort "Unknown build environment: '$BUILD_ENV'.  Aborting."
  fi

  step docker-compose "$flags" "$@"
}

info 'checking permissions'
check_root

info 'checking build environment'
check_build_env

info 'checking docker is installed'
check_and_install_docker

info 'adding any sudo users to docker group'
add_sudo_users_to_docker_group

info 'checking docker-compose is installed'
check_and_install_docker_compose

info 'building services (this might take a while)'
compose build

if [ "$BUILD_ENV" =  "production" ]; then
  info 'running letsencrypt'
  ./bin/letsencrypt

  info 'building frontend'
  compose run --rm slackerboard yarn run build
fi

info 'setting up db'
compose run --rm rails_server bin/setup

echo 'setup complete'
